from os import getenv
from aiogram import Bot, Dispatcher, types
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv
from aiogram.utils import executor
from api import API
import kb  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –º–æ–¥—É–ª—å kb, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from aiogram.types import CallbackQuery
from aiogram.utils import exceptions
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
 
load_dotenv()
# Bot token can be obtained via https://t.me/BotFather
TOKEN = getenv("BOT_TOKEN")
# All handlers should be attached to the Router (or Dispatcher)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=kb.greet_kb)

@dp.message_handler(lambda message: message.text == '–ü—Ä–∏–≤–µ—Ç! üëã')
async def process_hi_button_click(message: types.Message):
    # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.categories_kb)

@dp.callback_query_handler(lambda query: query.data.startswith('category_'))
async def process_category_callback(query: CallbackQuery):
    category = query.data  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    if category == 'category_1':
        api = API()
        books = api.get_books_list()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏–∑ –≤–∞—à–µ–≥–æ API
        books_kb = InlineKeyboardMarkup(row_width=1)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –≤ —Å–ø–∏—Å–∫–µ
        book_buttons = [
            InlineKeyboardButton(text=book['bookname'], callback_data=f"book_{book['id']}")
            for book in books
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–Ω–∏–≥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        books_kb.add(*book_buttons)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.message.edit_reply_markup(reply_markup=books_kb)
        except exceptions.MessageNotModified:
            pass
    else:
        # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        pass


 
from websocket import create_connection
 
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ WebSocket
def send_data_via_websocket(data):
    ws = create_connection("ws://10.100.2.12:8000/ws/")
    ws.send(data)
    result = ws.recv()
    ws.close()
    return result
 
   
import asyncio
import websockets
 
# async def receive_data():
#     async with websockets.connect('ws://10.100.2.12:8000/ws/') as websocket:
#         while True:
#             data = await websocket.recv()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±—Å–æ–∫–µ—Ç–∞
#             print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö


 
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ WebSocket
async def send_data_via_websocket(data):
    async with websockets.connect('ws://10.100.2.12:8000/ws/') as websocket:
        await websocket.send(data)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–µ–±-—Å–æ–∫–µ—Ç—É
 
@dp.callback_query_handler(lambda query: query.data.startswith('book_'))
async def process_book_callback(query: CallbackQuery):
    book_id = query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–∞
    api = API()
    book_info = api.get_book_info(book_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –ø–æ ID
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å ID –∫–Ω–∏–≥–∏
    book_id_button = InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å –∫–Ω–∏–≥—É : {book_info['bookname']}", callback_data='dummy_data')
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π ID –∫–Ω–∏–≥–∏
    book_id_kb = InlineKeyboardMarkup().add(book_id_button)
   
  
    await query.message.reply(
        f"–ê–≤—Ç–æ—Ä: {book_info['author']}\n–¶–µ–Ω–∞: {book_info['price']}",
        reply_markup=book_id_kb
    )
      
    # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å" –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ WebSocket
    data_to_send = {
        "user": str(query.from_user.id),
        "id": str(book_info['id'])
    } 
    import json
    await send_data_via_websocket(json.dumps(data_to_send))  # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 
# –¢–µ–ø–µ—Ä—å —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—é receive_data() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def receive_data():
    async with websockets.connect('ws://10.100.2.12:8000/ws/') as websocket:
        while True:
            data = await websocket.recv()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±—Å–æ–∫–µ—Ç–∞
            print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

 
import json


 
async def receive_data():
    try:
        async with websockets.connect('ws://10.100.2.12:8000/ws/') as websocket:
            print("Connected to WebSocket server")
            async for message in websocket:
                data = json.loads(message)
                print("sadsad",data)
                await process_message(data)
    except websockets.exceptions.WebSocketException as e:
        print(f"WebSocket connection error: {e}")
 
async def send_telegram_message(user_id, message_text):
    try:
        await bot.send_message(user_id, message_text)
        print(f"Message sent to user {user_id}: {message_text}")
    except Exception as e:
        print(f"Failed to send message to user {user_id}: {e}")
 
def process_message(data):
    print(f"Received data: {data}")
    # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebSocket
    user_id = data.get("user_id")
    payment_id = data.get("payment_id")
    if user_id:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
        asyncio.create_task(send_telegram_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ %s"%payment_id))
 
import asyncio
 
async def start_bot():
    event_loop.create_task(dp.start_polling())
    
if __name__ == '__main__':
    event_loop = asyncio.get_event_loop()
    event_loop.create_task(receive_data())
    event_loop.run_until_complete(start_bot())
    event_loop.run_forever()
